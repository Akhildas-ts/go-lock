// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interface/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "lock/domain"
	models "lock/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CheckingEmailValidation mocks base method.
func (m *MockUserRepo) CheckingEmailValidation(email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckingEmailValidation", email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckingEmailValidation indicates an expected call of CheckingEmailValidation.
func (mr *MockUserRepoMockRecorder) CheckingEmailValidation(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckingEmailValidation", reflect.TypeOf((*MockUserRepo)(nil).CheckingEmailValidation), email)
}

// CheckingPhoneExists mocks base method.
func (m *MockUserRepo) CheckingPhoneExists(phone string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckingPhoneExists", phone)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckingPhoneExists indicates an expected call of CheckingPhoneExists.
func (mr *MockUserRepoMockRecorder) CheckingPhoneExists(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckingPhoneExists", reflect.TypeOf((*MockUserRepo)(nil).CheckingPhoneExists), phone)
}

// FindUserDetailByEmail mocks base method.
func (m *MockUserRepo) FindUserDetailByEmail(user models.LoginDetails) (models.UserLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserDetailByEmail", user)
	ret0, _ := ret[0].(models.UserLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserDetailByEmail indicates an expected call of FindUserDetailByEmail.
func (mr *MockUserRepoMockRecorder) FindUserDetailByEmail(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserDetailByEmail", reflect.TypeOf((*MockUserRepo)(nil).FindUserDetailByEmail), user)
}

// PasswordHasing mocks base method.
func (m *MockUserRepo) PasswordHasing(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordHasing", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PasswordHasing indicates an expected call of PasswordHasing.
func (mr *MockUserRepoMockRecorder) PasswordHasing(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordHasing", reflect.TypeOf((*MockUserRepo)(nil).PasswordHasing), password)
}

// SignupInsert mocks base method.
func (m *MockUserRepo) SignupInsert(user models.SignupDetail) (models.SignupDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignupInsert", user)
	ret0, _ := ret[0].(models.SignupDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignupInsert indicates an expected call of SignupInsert.
func (mr *MockUserRepoMockRecorder) SignupInsert(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignupInsert", reflect.TypeOf((*MockUserRepo)(nil).SignupInsert), user)
}
